--12.
/*
   Descriere: Pentru fiecare birou, afișează id-ul,
              descrierea (etaj + număr birou) și câte plăți
              s-au făcut prin acel birou în 2024.
   Acest cod rezolva cerinta a)
*/
-- Selectăm informații despre fiecare birou
SELECT
  b.birou_id,  -- Afișăm ID-ul biroului

  -- Concatenăm etajul și numărul biroului într-o descriere ușor de citit
  'Etaj ' || b.etaj || ' #' || b.numar AS descriere_birou,

  -- Subinterogare care calculează câte plăți s-au făcut în 2024 prin acel birou
  (
    SELECT COUNT(*)  -- Numărăm toate plățile
    FROM plati p
    JOIN inchirieri_birouri ib
      ON p.inchiriere_id = ib.inchiriere_id  -- Leagă plata de închiriere
    WHERE ib.birou_id = b.birou_id           -- Se iau doar închirierile pentru biroul curent
      AND EXTRACT(YEAR FROM p.data_plata) = 2024  -- Se iau doar plățile din anul 2024
  ) AS nr_plati_2024  -- Coloana finală care indică numărul de plăți în 2024 pentru fiecare birou

FROM birouri b  -- Luăm toate birourile

ORDER BY b.birou_id;  -- Sortăm rezultatele crescător după ID-ul biroului



/* ============================================================
   Descriere: Calculează pentru fiecare clădire prețul mediu
              per loc și afișează lista de clădiri cu acest
              preț, sortată descrescător.
   Acest cod rezolva cerinta b)
*/
-- Selectăm lista clădirilor împreună cu prețul mediu per loc
SELECT
  c.Cladiri_ID,              -- ID-ul clădirii
  c.Denumire,                -- Numele clădirii
  stats.pret_med_per_loc     -- Prețul mediu per loc calculat pentru acea clădire

FROM Cladiri c               -- Tabela principală: Clădiri

-- Alăturăm rezultatele unei subinterogări care calculează prețul mediu per loc
JOIN (
  SELECT
    b.Cladiri_ID,            -- Grupăm după ID-ul clădirii
    AVG(t.Pret_Loc / nl.Numar_Locuri) AS pret_med_per_loc
                             -- Calculăm media: prețul pe loc pentru fiecare birou (Pret_Loc / NrLocuri)
                             -- și apoi media pentru toate birourile din acea clădire

  FROM Birouri b             -- Luăm birourile

  JOIN Tip_Birouri t         -- Legăm fiecare birou cu tipul lui pentru a lua prețul pe loc
    ON b.Tip_Birouri_ID = t.Tip_Birouri_ID

  JOIN Numar_Locuri nl       -- Legăm fiecare birou cu numărul său de locuri
    ON b.Numar_Locuri_ID = nl.Numar_Locuri_ID

  GROUP BY
    b.Cladiri_ID             -- Grupăm la nivel de clădire pentru a calcula media pe fiecare clădire
) stats
  ON c.Cladiri_ID = stats.Cladiri_ID  -- Legăm clădirile cu valorile medii obținute

ORDER BY
  stats.pret_med_per_loc DESC;        -- Sortăm descrescător după prețul mediu per loc


/* ============================================================

   Descriere: Afișează companiile și totalul încasărilor lor,
              dar numai pe acelea al căror total depășește
              media totală a încasărilor tuturor companiilor.
    Acest cod rezolva cerinta c)
*/


SELECT
  p.plati_id,
  c.nume                               AS companie,
  NVL(p.suma_de_plata, 0)              AS suma,
  DECODE(
    mp.metoda_plata,
    'cash',            'Plata numerar',
    'card',            'Plata cu card',
    'transfer bancar', 'Plata prin transfer',
    'Altă metodă'
  )                                     AS metoda_prietenoasa,
  p.data_plata
FROM plati p
JOIN companii c
  ON p.companie_id = c.companie_id
JOIN metoda_de_plata mp
  ON p.metoda_plata_id = mp.metoda_plata_id
ORDER BY p.data_plata DESC
;

/* ============================================================
   Descriere: Afișează fiecare plată cu ID-ul, numele
              companiei, suma (0 dacă e NULL), descrierea
              metodei de plată prin DECODE și data plății,
              ordonate descrescător după dată.
   Acest cod rezolva cerinta d)
*/
-- Afișează informații despre plăți, inclusiv denumirea companiei, suma plătită (cu tratament pentru NULL),
-- metoda de plată într-o formă prietenoasă, ordonat descrescător după data plății

SELECT
  p.plati_id,                                  -- ID-ul plății
  c.nume                               AS companie,  -- Numele companiei care a făcut plata

  NVL(p.suma_de_plata, 0)              AS suma,       -- Suma plătită; dacă e NULL, o înlocuiește cu 0

  DECODE(                                          -- Traducere a metodei de plată în formă prietenoasă
    mp.metoda_plata,
    'cash',            'Plata numerar',            -- dacă metoda este 'cash', se afișează 'Plata numerar'
    'card',            'Plata cu card',
    'transfer bancar', 'Plata prin transfer',
    'Altă metodă'                                   -- valoare implicită dacă nu se potrivește nimic
  )                                     AS metoda_prietenoasa,

  p.data_plata                                     -- Data la care a fost efectuată plata

FROM plati p                             -- Tabela principală: plăți

JOIN companii c                          -- Alăturăm tabela companii pentru a obține numele companiei
  ON p.companie_id = c.companie_id

JOIN metoda_de_plata mp                 -- Alăturăm tabela cu metode de plată pentru decodare
  ON p.metoda_plata_id = mp.metoda_plata_id

ORDER BY p.data_plata DESC;             -- Ordonăm rezultatele de la cele mai recente la cele mai vechi


/* ============================================================

   Descriere: Pentru fiecare birou, află data ultimei
              închirieri, numărul de zile scurse de atunci
              și clasifică-l (‘Recent’, ‘Moderate’, ‘Vechi’),
              afișând și un cod și un tip prescurtat.
   Acest cod rezolva cerinta e) si f)
*/


-- CTE (Common Table Expression) care calculează pentru fiecare birou data ultimei închirieri
WITH ultimele_inchirieri AS (
  SELECT
    b.birou_id,                          -- ID-ul biroului
    MAX(i.data_final) AS data_ultima    -- Cea mai recentă dată de închiriere pentru acel birou
  FROM birouri b
  JOIN inchirieri_birouri ib
    ON b.birou_id = ib.birou_id         -- Asociere birou - închiriere
  JOIN inchirieri i
    ON ib.inchiriere_id = i.inchiriere_id -- Obținem data închirierii
  GROUP BY b.birou_id                   -- Grupăm pentru fiecare birou
)

-- Interogarea principală: Afișează detalii pentru fiecare birou,
-- împreună cu categoria lui în funcție de cât timp a trecut de la ultima închiriere
SELECT
  'Birou ' || TO_CHAR(b.birou_id)        AS cod_birou,       -- Cod text format: "Birou X"
  UPPER(SUBSTR(t.tip,1,3))               AS tip_scurt,       -- Primele 3 litere din tipul biroului, cu majuscule
  ui.data_ultima                         AS data_final,      -- Data ultimei închirieri
  TRUNC(SYSDATE - ui.data_ultima)        AS zile_trecute,    -- Numărul de zile scurse de la acea dată

  CASE                                    -- Clasificare în funcție de vechime:
    WHEN SYSDATE - ui.data_ultima < 7   THEN 'Recent'        -- sub 7 zile => Recent
    WHEN SYSDATE - ui.data_ultima <= 30 THEN 'Moderate'      -- între 7 și 30 => Moderate
    ELSE 'Vechi'                                              -- peste 30 zile => Vechi
  END                                    AS categorie

FROM birouri b
JOIN ultimele_inchirieri ui
  ON b.birou_id = ui.birou_id            -- Alăturăm data ultimei închirieri
JOIN tip_birouri t
  ON b.tip_birouri_id = t.tip_birouri_id -- Alăturăm detalii despre tipul biroului

ORDER BY zile_trecute DESC;              -- Sortăm de la cele mai vechi spre cele mai recente


--13.
/* ----------------------------------------------------------------
Operațiunea 1: Marcarea companiilor inactive - UPDATE cu subcerere corelată (EXISTS)
Aflăm companiile care nu au niciună plată înregistrată și adăugăm sufixul " (Inactive)" la câmpul Nume.
------------------------------------------------------------------ */

                                         -- Actualizează companiile care NU au efectuat nicio plată
UPDATE Companii c
   SET c.Nume = c.Nume || ' (Inactive)'  -- Adaugă sufixul "(Inactive)" la numele companiei
 WHERE NOT EXISTS (                      -- Doar dacă NU există nicio plată asociată companiei
         SELECT 1
           FROM Plati p
          WHERE p.Companie_ID = c.Companie_ID
       );

-- Confirmăm modificările în baza de date (permanent)
COMMIT;

-- Afișăm doar companiile marcate ca inactive
SELECT Companie_ID, Nume
FROM Companii
WHERE Nume LIKE '%(Inactive)'           -- Căutăm companii cu sufixul adăugat mai sus
ORDER BY Companie_ID;


/* ----------------------------------------------------------------
Operațiunea 2: Majorare preț loc pentru tipuri populare. UPDATE cu subcerere nesincronizată în FROM
Pentru fiecare tip de birou care a fost închiriat de mai mult de 5 ori
(adică acel tip apare în tabelul INCHIRIERI_BIROURI de mai mult de 5 ori), creștem prețul per loc cu 10%.
 */
------------------------------------------------------------------ */

-- Actualizăm prețul per loc (+10%) pentru tipurile de birouri populare (cu peste 5 închirieri)
UPDATE tip_birouri t
   SET t.pret_loc = t.pret_loc * 1.10   -- Creștem cu 10% prețul per loc
 WHERE t.tip_birouri_id IN (            -- Doar pentru acele tipuri care respectă condiția de mai jos
         SELECT tip_birouri_id
           FROM (                       -- Subinterogare care calculează frecvența închirierii fiecărui tip
             SELECT b.tip_birouri_id,
                    COUNT(*) AS cnt     -- Număr de apariții în închirieri
               FROM birouri b
               JOIN inchirieri_birouri ib
                 ON b.birou_id = ib.birou_id  -- Corelăm biroul cu închirierile
              GROUP BY b.tip_birouri_id
            ) sub
          WHERE sub.cnt > 5             -- Filtrăm doar tipurile care au fost închiriate de peste 5 ori
       );

-- Salvăm modificările
COMMIT;

-- Verificăm rezultatul actualizării
SELECT
  b.birou_id,                           -- ID-ul biroului
  b.etaj,                               -- Etajul unde se află biroul
  b.numar       AS numar_birou,        -- Numărul biroului
  t.tip         AS tip_birou,          -- Tipul biroului (ex: Open Desk)
  t.pret_loc    AS tarif_per_loc       -- Prețul per loc, actualizat
FROM birouri b
JOIN tip_birouri t
  ON b.tip_birouri_id = t.tip_birouri_id  -- Corelăm birourile cu tipurile lor
ORDER BY b.birou_id;



/* ----------------------------------------------------------------
Operațiunea 3: Ștergerea închirierilor vechi. DELETE cu subcerere (IN)
Ștergem toate rândurile din INCHIRIERI_BIROURI care au asociate
închirieri finalizate înainte de 1 ianuarie 2024, apoi ștergem și înregistrările din INCHIRIERI.
 */
------------------------------------------------------------------ */
-- 1) Ștergem asocierile birou–închiriere pentru închirieri finalizate înainte de 2024

-- 1) Ștergem din tabelul de legătură închirieri_birouri
-- toate asocierile care se referă la închirieri încheiate înainte de 1 ianuarie 2024
DELETE FROM Inchirieri_birouri ib
 WHERE ib.Inchiriere_ID IN (
         SELECT i.Inchiriere_ID
           FROM Inchirieri i
          WHERE i.Data_final < DATE '2024-01-01'  -- Filtrăm închirierile vechi
       );

-- 2) Afișăm conținutul actual al tabelului Inchirieri_birouri după ștergere
-- pentru a verifica ce a rămas
SELECT *
FROM Inchirieri_birouri
ORDER BY Inchiriere_ID, Birou_ID, Utilizator_ID;

-- 3) Ștergem și înregistrările din tabela principală Inchirieri
-- care au fost finalizate înainte de 2024
DELETE FROM Inchirieri i
 WHERE i.Data_final < DATE '2024-01-01';

-- 4) Confirmăm ștergerile anterioare
COMMIT;

-- 5) Afișăm închirierile rămase după ștergere, pentru verificare
SELECT *
FROM Inchirieri
ORDER BY Inchiriere_ID;

--14.



-- 1) Cream un VIEW denumit Vw_BirouriDetaliate
-- Acesta agregă informații din 4 tabele: Birouri, Clădiri, Tip_Birouri și Numar_Locuri
-- Scopul este să avem o imagine detaliată a fiecărui birou, cu clădire, tip, nr. locuri și cost total
CREATE VIEW Vw_BirouriDetaliate AS
SELECT
  b.Birou_ID,                                -- ID-ul unic al biroului
  c.Denumire    AS NumeCladire,             -- Numele clădirii în care se află biroul
  t.Tip         AS TipBirou,                -- Tipul biroului (ex: Open Desk, Cabinet etc.)
  nl.Numar_Locuri,                          -- Numărul de locuri disponibile în acel birou
  -- coloană calculată: preț total = preț per loc * nr. locuri
  (t.Pret_Loc * nl.Numar_Locuri) AS CostTotalLocuri
FROM Birouri b
JOIN Cladiri c        ON b.Cladiri_ID       = c.Cladiri_ID       -- fiecare birou aparține unei clădiri
JOIN Tip_Birouri t    ON b.Tip_Birouri_ID   = t.Tip_Birouri_ID   -- legătura cu tipul biroului
JOIN Numar_Locuri nl  ON b.Numar_Locuri_ID  = nl.Numar_Locuri_ID -- legătura cu numărul de locuri
;
-- Interogare pe VIEW (operație LMD permisă)
-- Afișăm toate birourile detaliate care au cost total sub 200
SELECT *
FROM Vw_BirouriDetaliate
WHERE CostTotalLocuri < 200;

-- Încercare de inserare în VIEW — nu este permisă
-- Deoarece VIEW-ul conține o coloană calculată (CostTotalLocuri) și se bazează pe mai multe tabele
-- Operațiile de INSERT, UPDATE și DELETE pe acest VIEW nu sunt permise
INSERT INTO Vw_BirouriDetaliate (Birou_ID, NumeCladire, TipBirou, Numar_Locuri, CostTotalLocuri)
VALUES (11, 'Skyline Plaza', 'Open Desk', 1, 20);






--15.


-- ============================================================
-- 1) OUTER JOIN pe minim 4 tabele
-- Scop: afișează toate birourile, cu facilități (dacă există),
--      tipul biroului (dacă e definit), numărul de locuri (dacă e definit)
--      și numele clădirii (necesar, deci INNER JOIN pe cladiri).
-- Notă: coloanele TIP_BIROURI_ID și NUMAR_LOCURI_ID din BIROURI trebuie să accepte NULL
SELECT
  bir.birou_id,                        -- ID-ul biroului
  cld.denumire     AS nume_cladire,    -- denumirea clădirii
  bir.etaj,                            -- etajul biroului
  bir.numar        AS numar_birou,     -- numărul biroului
  lfct.descriere_facilitate,           -- descrierea facilității (NULL dacă nu are)
  tbir.tip,                            -- tipul biroului (NULL dacă nu e specificat)
  nrl.numar_locuri                     -- numărul de locuri (NULL dacă nu e specificat)
FROM birouri bir
  LEFT OUTER JOIN facilitati_birouri fbir
    ON fbir.birou_id = bir.birou_id    -- păstrează birourile chiar dacă n-au facilități
  LEFT OUTER JOIN lista_facilitati lfct
    ON lfct.facilitate_id = fbir.facilitate_id
  LEFT OUTER JOIN tip_birouri tbir
    ON tbir.tip_birouri_id = bir.tip_birouri_id  -- păstrează birourile fără tip definit
  LEFT OUTER JOIN numar_locuri nrl
    ON nrl.numar_locuri_id = bir.numar_locuri_id -- păstrează birourile fără nr. locuri
  JOIN cladiri cld
    ON cld.cladiri_id = bir.cladiri_id  -- fiecare birou trebuie să aparțină unei clădiri
ORDER BY bir.birou_id
;

-- ============================================================
-- 2) DIVISION: tipuri de birouri care NU sunt folosite în nicio închiriere
-- Scop: găsește toate tipurile pentru care nu există niciun birou în inchirieri_birouri
--nu merge sa scot check-ul si nu pot introduce tipuri noi de birouri
--dar am rulat in alt mediu fara checkuri si functioneaza

-- Adăugăm un nou tip de birou, pentru a testa dacă interogarea returnează rezultatul corect
-- (necesar pentru că toate celelalte tipuri existente sunt deja folosite)
-- Această linie este doar pentru test / demonstrație și poate fi eliminată ulterior
INSERT INTO Tip_Birouri (Tip, Pret_Loc)
VALUES ('Open Desk_1', 200000);

-- Confirmăm salvarea modificărilor prin COMMIT
COMMIT;

-- Selectăm toate tipurile de birouri care NU sunt folosite în nicio închiriere
SELECT *
FROM Tip_Birouri tb
WHERE NOT EXISTS (
  SELECT 1
  FROM Inchirieri_birouri ib
  JOIN Birouri b
    ON ib.Birou_ID = b.Birou_ID
  WHERE b.Tip_Birouri_ID = tb.Tip_Birouri_ID
)
ORDER BY tb.Tip_Birouri_ID;


-- ============================================================
-- 3) TOP-N (primele 4 cele mai mari sume de plată)
-- Scop: afișează top 4 plăți ordonate descrescător după sumă
--         (se poate adapta pentru paginare cu OFFSET…FETCH NEXT)


SELECT
  p.plati_id,                             -- Selectăm ID-ul plății din tabela PLATI

  c.nume AS companie,                     -- Afișăm numele companiei care a făcut plata

  NVL(p.suma_de_plata, 0) AS suma,        -- Afișăm suma plătită; dacă este NULL, o înlocuim cu 0

  DECODE(                                 -- Folosim DECODE pentru a transforma codurile metodei de plată în termeni mai ușor de înțeles
    mp.metoda_plata,
    'cash',            'Plata numerar',   -- Dacă metoda este 'cash', afișăm 'Plata numerar'
    'card',            'Plata cu card',   -- Dacă este 'card', afișăm 'Plata cu card'
    'transfer bancar', 'Plata prin transfer', -- Dacă este 'transfer bancar', afișăm 'Plata prin transfer'
    'Altă metodă'                         -- Orice altă valoare se afișează ca 'Altă metodă'
  ) AS metoda_prietenoasa,                -- Alias pentru coloana cu descrierea metodei de plată

  p.data_plata                            -- Afișăm data la care a fost făcută plata

FROM plati p                              -- Tabela de bază este PLATI, redenumită "p" pentru referință

JOIN companii c                           -- Alăturăm tabela COMPANII pentru a obține numele companiei
  ON p.companie_id = c.companie_id        -- Legăm înregistrările prin ID-ul companiei

JOIN metoda_de_plata mp                   -- Alăturăm tabela METODA_DE_PLATA pentru a obține descrierea metodei
  ON p.metoda_plata_id = mp.metoda_plata_id -- Legăm înregistrările prin ID-ul metodei de plată

ORDER BY 3 DESC                           -- Ordonăm rezultatele descrescător după a treia coloană (suma plății)

FETCH FIRST 4 ROWS ONLY                   -- Afișăm doar primele 4 rânduri din rezultatul ordonat (Top 4 plăți)

